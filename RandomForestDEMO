{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN+LuJ9cQ8X1rpKoEVbH6Aq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/solita/a-ice/blob/main/RandomForestDEMO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5O9k9ItjO8U6",
        "outputId": "96ad47ff-2167-4431-9a9d-d9ed0c083e97"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "upauA4OFPBsu"
      },
      "source": [
        "df = pd.read_csv('/content/drive/Shareddrives/A-ICE/Data/AIS+ICE/winter_dataset.csv')"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C7cgFi6xPCzz"
      },
      "source": [
        "def mean_error(y_test, pred):\n",
        "    return np.mean(np.abs(pred-y_test))"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qRKhtIYdPEWt"
      },
      "source": [
        "errors = []\n",
        "importance = []\n",
        "mmsis = df.mmsi.unique()\n",
        "for mmsi in mmsis:\n",
        "    train_set = df.loc[df.mmsi==mmsi]\n",
        "    test_set = df.loc[df.mmsi!=mmsi]\n",
        "    x_train = train_set[['wind_hailuoto','temperature_hailuoto', 'ice_thickness', 'ice_concentration']]\n",
        "    x_test = test_set[['wind_hailuoto', 'temperature_hailuoto', 'ice_thickness', 'ice_concentration']]\n",
        "    y_train = train_set['speed']\n",
        "    y_test = test_set['speed']\n",
        "    y_train = np.ravel(y_train)\n",
        "    model = RandomForestRegressor()\n",
        "    model.fit(x_train, y_train)\n",
        "    prediction = model.predict(x_test)\n",
        "    errors.append([mean_error(y_test,prediction)])\n",
        "    importance.append(model.feature_importances_)\n",
        "\n"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sZ6FzOHrPjA8",
        "outputId": "c215e802-c519-4b82-dbca-f5ed28e08a31"
      },
      "source": [
        "print(errors)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[2.3143947593526133], [1.6715294274416694], [1.7450986392425634], [1.4691276529923885], [1.3933174382284295], [1.5653488768843686], [1.9025904532112805], [1.4123834872830512], [1.4359746771442479], [1.3977109510333499], [1.4068524787716932], [1.9955222366840797], [1.7016356040750376], [1.94742521004563], [2.1531413397605657], [1.4976215774792743], [1.7390207899498902], [1.4355189782756401], [1.4014465753147611], [1.3796365769529566], [2.0580049556996007], [4.146285428095667], [1.5043551098624], [2.878910034640747], [1.8523989954993325], [1.422389882173132], [1.760572224377411], [2.866267731426413], [2.7083344271459207], [1.4384721140054648], [1.4586899525443744], [2.1759560265285027], [1.4701239528957706], [1.4201398404902064], [1.5271250576252875], [2.094264326310862], [1.560015595009569], [1.387078428834967], [1.3786119609532201], [1.4863384363270566], [1.6816236826698248], [2.0066271950884347], [1.6939498802572508], [1.611708188495314], [1.6480830332052097], [1.5181942546043588], [1.3620417013493797], [2.171951480900154], [2.4951888184610347], [2.0885502320382074], [1.38941603713835], [1.9986126632420922]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQo_NVP-Poko",
        "outputId": "bed46038-81b9-4baa-c54c-189e2a7796d4"
      },
      "source": [
        "print(importance)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[array([0.15368079, 0.71915951, 0.09029563, 0.03686407]), array([0.23101919, 0.46751223, 0.17832736, 0.12314122]), array([0.0784138 , 0.24733504, 0.41215187, 0.26209929]), array([0.7493054 , 0.18929237, 0.02270607, 0.03869617]), array([0.21200342, 0.53877451, 0.03795105, 0.21127103]), array([0.10554132, 0.35440974, 0.00180002, 0.53824892]), array([0.1614388 , 0.73720236, 0.04570195, 0.0556569 ]), array([0.39571753, 0.54706868, 0.0281102 , 0.02910359]), array([0.12630896, 0.51058859, 0.23693895, 0.12616351]), array([0.63543728, 0.32729545, 0.00438672, 0.03288055]), array([0.45736168, 0.08306113, 0.03321391, 0.42636328]), array([0.16193228, 0.1701552 , 0.01681548, 0.65109704]), array([0.10815143, 0.0520588 , 0.8265566 , 0.01323316]), array([0.12312698, 0.44810041, 0.29752242, 0.13125019]), array([0.32144804, 0.34193019, 0.21003236, 0.12658941]), array([1.71579016e-02, 5.57364825e-02, 2.65695555e-04, 9.26839920e-01]), array([0.17946684, 0.69029706, 0.06389462, 0.06634149]), array([0.74843174, 0.15903134, 0.01050783, 0.08202909]), array([0.13295093, 0.83688599, 0.00634338, 0.0238197 ]), array([0.66550769, 0.17537027, 0.05985211, 0.09926994]), array([0.12239209, 0.85248776, 0.02512014, 0.        ]), array([0.68336929, 0.06215154, 0.25363864, 0.00084052]), array([0.41847889, 0.23651214, 0.00223534, 0.34277363]), array([0.08549364, 0.89271521, 0.00744377, 0.01434738]), array([0.52640525, 0.12141934, 0.32629807, 0.02587734]), array([0.73076884, 0.19633228, 0.07154658, 0.0013523 ]), array([0.11497931, 0.62379337, 0.06101812, 0.2002092 ]), array([0.39072131, 0.55506661, 0.0246084 , 0.02960368]), array([0.55833613, 0.17982367, 0.12472   , 0.1371202 ]), array([0.20060968, 0.19626349, 0.15414588, 0.44898094]), array([0.18600912, 0.15829944, 0.60217661, 0.05351482]), array([0.29210892, 0.40731208, 0.00239674, 0.29818226]), array([8.66271049e-02, 6.03939340e-01, 1.07803748e-04, 3.09325751e-01]), array([0.51156474, 0.44792618, 0.0213893 , 0.01911978]), array([5.99479056e-01, 4.00224077e-01, 1.71821120e-04, 1.25046316e-04]), array([0.40254944, 0.41159193, 0.11283948, 0.07301915]), array([0.3521971 , 0.19926133, 0.1243827 , 0.32415887]), array([0.18740267, 0.5307162 , 0.14807125, 0.13380989]), array([0.54183623, 0.37056952, 0.0222612 , 0.06533304]), array([0.4027174 , 0.39991985, 0.01442813, 0.18293463]), array([0.04186569, 0.05729728, 0.42108232, 0.47975471]), array([0.25759438, 0.62454887, 0.06011951, 0.05773724]), array([0.22731507, 0.15154749, 0.0930602 , 0.52807724]), array([0.34749409, 0.59126189, 0.02517515, 0.03606887]), array([0.08146101, 0.22064832, 0.33548859, 0.36240207]), array([2.79027970e-02, 9.95500629e-02, 2.92835783e-04, 8.72254304e-01]), array([0.33042433, 0.28445996, 0.16397204, 0.22114367]), array([0.3942641 , 0.41773866, 0.03512585, 0.15287138]), array([0.39754427, 0.45739792, 0.04447041, 0.1005874 ]), array([0.47318736, 0.52681264, 0.        , 0.        ]), array([0.18327471, 0.43198965, 0.18846041, 0.19627523]), array([0.41000838, 0.34825109, 0.2061197 , 0.03562083])]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "M6IB2DIpQ1gD",
        "outputId": "602f8f24-47b0-4eab-e7a2-19564c54a091"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.pcolormesh(importance)\n",
        "plt.colorbar()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.colorbar.Colorbar at 0x7fc7af68fcd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}